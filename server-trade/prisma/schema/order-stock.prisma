model OrderStock {
  id           String               @id @default(uuid())
  stockId      String // On what stock is order accepted
  stock        Stock                @relation(fields: [stockId], references: [id], onDelete: Cascade)
  userId       String // Who maded an order
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  type         OrderType
  quantity     Int
  offeredPrice Float // per single stock | max per purshare | min per sell
  paymentId    String? // payment stipe
  status       OrderStatus          @default(PENDING)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  transaction  TransactionHistory[]
  // do we need maxPrice | minPrice per stock?
  // do we need notifications for our service, when status of order changes?

  @@map("stock_orders")
}

enum OrderType {
  BUY
  SELL
}

enum OrderStatus {
  PENDING // someone accepted order
  ACCEPTED // someone takes order in payment process
  REJECTED // someone reject order
  COMPLETED // payment was successfull
  CANCELED // host canceled order 
}
